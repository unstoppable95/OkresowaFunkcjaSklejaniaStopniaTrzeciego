function periodsplinevalue_przed (n      : Integer;
                            interval_x,interval_f    : vectorprz;
                            xx     : Interval;
                            var st : Integer) : Interval;
{---------------------------------------------------------------------------}
{                                                                           }
{  The function periodsplinevalue calculates the value of the periodic      }
{  cubic spline interpolant for a function given by its values at nodes.    }
{  Data:                                                                    }
{    n  - number of interpolation nodes minus 1 (the nodes are numbered     }
{         from 0 to n),                                                     }
{    x  - an array containing the values of nodes,                          }
{    f  - an array containing the values of function (the value of f[0]     }
{         should be equal to the value of f[n]),                            }
{    xx - the point at which the value of interpolating spline should       }
{         be calculated.                                                    }
{  Result:                                                                  }
{    periodsplinevalue(n,x,f,xx,st) - the value of periodic spline at xx.   }
{  Other parameters:                                                        }
{    st - a variable which within the function periodsplinevalue is         }
{         assigned the value of:                                            }
{           1, if n<1,                                                      }
{           2, if there exist x[i] and x[j] (i<>j; i,j=0,1,...,n) such      }
{              that x[i]=x[j],                                              }
{           3, if f[0]<>f[n],                                               }
{           4, if xx<x[0] or xx>x[n],                                       }
{           0, otherwise.                                                   }
{         Note: If st<>0, then periodicsplinevalue(n,x,f,xx,st) is not      }
{               calculated.                                                 }
{  Unlocal identifiers:                                                     }
{    vector  - a type identifier of extended array [q0..qn], where q0<=0    }
{              and qn>=n,                                                   }
{    vector1 - a type identifier of extended array [q1..qn], where q1<=1    }
{              and qn>=n,                                                   }
{    vector2 - a type identifier of extended array [q1..qn1], where q1<=1   }
{              and qn1>=n-1,                                                }
{    vector3 - a type identifier of extended array [q2..qn], where q2<=2    }
{              and qn>=n.                                                   }
{                                                                           }
{---------------------------------------------------------------------------}
var i,k   : Integer;
    v,y,z : Interval;
    found : Boolean;
    a     : array [0..3] of Interval;
    u     : Array of Interval;
    b,c,d : Array of Interval;
    p     : Array of Interval;
    q     : Array of Interval;
begin
// dziala dla n+2 jak mam dynamiczna tu i inkrementowanie w glownym po

SetLength(a, n+2);
SetLength(u, n+2);
SetLength(b, n+2);
SetLength(c, n+2);
SetLength(d, n+2);
SetLength(p, n+2);
SetLength(q, n+2);
  
  if n<1
    then st:=1
    else if ((interval_f[0].a<>interval_f[n].a) OR (interval_f[0].b<>interval_f[n].b))
           then st:=3
           else if (xx.b<interval_x[0].a) or (xx.a>interval_x[n].b)
                  then st:=4
                  else begin
                         st:=0;
                         i:=-1;
                         repeat
                           i:=i+1;
                           for k:=i+1 to n do
                             if ((interval_x[i].a=interval_x[k].a) and (interval_x[i].b=interval_x[k].b))
                               then st:=2
                         until (i=n-1) or (st=2)
                       end;
  if st=0
    then begin
           if n>1
             then begin
                    v:=isub(interval_x[1],interval_x[0]);
                    z:=isub(interval_x[n],interval_x[n-1]);
                    b[n]:=idiv(v,iadd(z,v));
                    c[n]:=isub(int_read('1'),b[n]);
                    y:=interval_f[n];
                    d[n]:=imul(int_read('6'),idiv(isub(idiv(isub(interval_f[1],y),v),idiv(isub(y,interval_f[n-1]),z)),iadd(z,v)));
                    for i:=1 to n-1 do
                      begin
                        z:=interval_x[i];
                        y:=isub(interval_x[i+1],z);
                        z:=isub(z,interval_x[i-1]);
                        v:=interval_f[i];
                        b[i]:=idiv(y,iadd(y,z));
                        c[i]:=isub(int_read('1'),b[i]);
                        d[i]:=imul(int_read('6'),idiv(isub(idiv(isub(interval_f[i+1],v),y),idiv(isub(v,interval_f[i-1]),z)),iadd(y,z)));
                      end;
                    if n>2
                      then begin
                             u[1]:=int_read('2');
                             c[2]:=idiv(c[2],int_read('2'));
                             q[2]:=isub(int_read('0'),idiv(b[n],int_read('2')));
                             for i:=2 to n-2 do
                               begin
                                 v:=isub(int_read('2'),imul(b[i-1],c[i]));
                                 c[i+1]:=idiv(c[i+1],v);
                                 q[i+1]:=isub(int_read('0'),idiv(imul(q[i],b[i-1]),v));
                                 u[i]:=v
                               end;
                             v:=isub(int_read('2'),imul(c[n-1],b[n-2]));
                             q[n]:=idiv(isub(c[n],imul(q[n-1],b[n-2])),v);
                             u[n-1]:=v;
                             p[1]:=c[1];
                             for i:=2 to n-2 do
                               p[i]:=isub(int_read('0'),imul(c[i],p[i-1]));
                             p[n-1]:=isub(b[n-1],imul(c[n-1],p[n-2]));
                             v:=isub(int_read('2'),imul(c[1],p[2]));
                             for i:=2 to n-2 do
                             v:=isub(v,imul(p[i],p[i+1]));
                             u[n]:=isub(v,imul(p[n-1],q[n]));
                             for i:=2 to n-1 do
                               d[i]:=isub(d[i],imul(c[i],d[i-1]));
                             v:=d[n];
                             for i:=2 to n do
                               v:=isub(v,imul(q[i],d[i-1]));
                             d[n]:=v;
                             u[n]:=idiv(d[n],u[n]);
                             u[n-1]:=idiv(isub(d[n-1],imul(p[n-1],u[n])),u[n-1]);
                             for i:=n-2 downto 1 do
                               u[i]:=idiv(isub(isub(d[i],imul(b[i],u[i+1])),imul(p[i],u[n])),u[i]);
                           end
                      else begin
                             y:=d[1];
                             z:=d[2];
                             v:=isub(int_read('4'),imul(c[2],b[1]));
                             u[1]:=idiv(isub(imul(int_read('2'),y),imul(b[1],z)),v);
                             u[2]:=idiv(isub(imul(int_read('2'),z),imul(c[2],y)),v);
                           end
                  end
             else u[1]:=int_read('0');
           u[0]:=u[n];
           found:=False;
           i:=-1;
           repeat
             i:=i+1;
             if (xx.a>=interval_x[i].b) and (xx.b<=interval_x[i+1].a)
               then found:=True
           until found;
           y:=isub(interval_x[i+1],interval_x[i]);
           z:=u[i+1];
           v:=u[i];
           a[0]:=interval_f[i];
           a[1]:=isub(idiv(isub(interval_f[i+1],interval_f[i]),y),idiv(imul(iadd(imul(int_read('2'),v),z),y),int_read('6')));
           a[2]:=idiv(v,int_read('2'));
           a[3]:=idiv(isub(z,v),imul(int_read('6'),y));
           y:=a[3];
           z:=isub(xx,interval_x[i]);
           for i:=2 downto 0 do
             y:=iadd(imul(y,z),a[i]);
           iperiodsplinevalue:=y;
         end
end;